<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.zucc.se2020g11.api.dao.CompositionEntityMapper">
  <resultMap id="BaseResultMap" type="cn.edu.zucc.se2020g11.api.entity.CompositionEntity">
    <id column="composition_id" jdbcType="INTEGER" property="compositionId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="release_time" jdbcType="TIMESTAMP" property="releaseTime" />
    <result column="composition_body" jdbcType="VARCHAR" property="compositionBody" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="visibility" jdbcType="INTEGER" property="visibility" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="valid" jdbcType="BIT" property="valid" />
    <result column="word_score" jdbcType="DOUBLE" property="wordScore" />
    <result column="grammar_score" jdbcType="DOUBLE" property="grammarScore" />
    <result column="sentence_fluency_score" jdbcType="DOUBLE" property="sentenceFluencyScore" />
    <result column="length_score" jdbcType="DOUBLE" property="lengthScore" />
    <result column="richness_score" jdbcType="DOUBLE" property="richnessScore" />
  </resultMap>
  <sql id="Base_Column_List">
    composition_id, username, release_time, composition_body, status, title, description,
    visibility, score, valid, word_score, grammar_score, sentence_fluency_score, length_score, richness_score
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from composition
    where composition_id = #{compositionId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from composition
    where composition_id = #{compositionId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity" useGeneratedKeys="true" keyProperty="compositionId">
    insert into composition (composition_id, username, release_time,
                             composition_body, status, title,
                             description, visibility, score,
                             valid, word_score, grammar_score, sentence_fluency_score, length_score, richness_score)
    values (#{compositionId,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{releaseTime,jdbcType=TIMESTAMP},
            #{compositionBody,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR},
            #{description,jdbcType=VARCHAR}, #{visibility,jdbcType=INTEGER}, #{score,jdbcType=INTEGER},
            #{valid,jdbcType=BIT}, #{wordScore,jdbcType=DOUBLE}, #{grammarScore,jdbcType=DOUBLE},
            #{sentenceFluencyScore,jdbcType=DOUBLE}, #{lengthScore,jdbcType=DOUBLE}, #{richnessScore,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity">
    insert into composition
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="compositionId != null">
        composition_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="releaseTime != null">
        release_time,
      </if>
      <if test="compositionBody != null">
        composition_body,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="visibility != null">
        visibility,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="valid != null">
        valid,
      </if>
      <if test="wordScore != null">
        word_score,
      </if>
      <if test="grammarScore != null">
        grammar_score,
      </if>
      <if test="sentenceFluencyScore != null">
        sentence_fluency_score,
      </if>
      <if test="lengthScore != null">
        length_score,
      </if>
      <if test="richnessScore != null">
        richness_score,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="compositionId != null">
        #{compositionId,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="releaseTime != null">
        #{releaseTime,jdbcType=TIMESTAMP},
      </if>
      <if test="compositionBody != null">
        #{compositionBody,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="visibility != null">
        #{visibility,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
      <if test="valid != null">
        #{valid,jdbcType=BIT},
      </if>
      <if test="wordScore != null">
        #{wordScore,jdbcType=DOUBLE},
      </if>
      <if test="grammarScore != null">
        #{grammarScore,jdbcType=DOUBLE},
      </if>
      <if test="sentenceFluencyScore != null">
        #{sentenceFluencyScore,jdbcType=DOUBLE},
      </if>
      <if test="lengthScore != null">
        #{lengthScore,jdbcType=DOUBLE},
      </if>
      <if test="richnessScore != null">
        #{richnessScore,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity">
    update composition
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="releaseTime != null">
        release_time = #{releaseTime,jdbcType=TIMESTAMP},
      </if>
      <if test="compositionBody != null">
        composition_body = #{compositionBody,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="visibility != null">
        visibility = #{visibility,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="valid != null">
        valid = #{valid,jdbcType=BIT},
      </if>
      <if test="wordScore != null">
        word_score = #{wordScore,jdbcType=DOUBLE},
      </if>
      <if test="grammarScore != null">
        grammar_score = #{grammarScore,jdbcType=DOUBLE},
      </if>
      <if test="sentenceFluencyScore != null">
        sentence_fluency_score = #{sentenceFluencyScore,jdbcType=DOUBLE},
      </if>
      <if test="lengthScore != null">
        length_score = #{lengthScore,jdbcType=DOUBLE},
      </if>
      <if test="richnessScore != null">
        richness_score = #{richnessScore,jdbcType=DOUBLE},
      </if>
    </set>
    where composition_id = #{compositionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity">
    update composition
    set username = #{username,jdbcType=VARCHAR},
        release_time = #{releaseTime,jdbcType=TIMESTAMP},
        composition_body = #{compositionBody,jdbcType=VARCHAR},
        status = #{status,jdbcType=INTEGER},
        title = #{title,jdbcType=VARCHAR},
        description = #{description,jdbcType=VARCHAR},
        visibility = #{visibility,jdbcType=INTEGER},
        score = #{score,jdbcType=INTEGER},
        valid = #{valid,jdbcType=BIT},
        word_score = #{wordScore,jdbcType=DOUBLE},
        grammar_score = #{grammarScore,jdbcType=DOUBLE},
        sentence_fluency_score = #{sentenceFluencyScore,jdbcType=DOUBLE},
        length_score = #{lengthScore,jdbcType=DOUBLE},
        richness_score = #{richnessScore,jdbcType=DOUBLE}
    where composition_id = #{compositionId,jdbcType=INTEGER}
  </update>
  <select id="selectAllSelective" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity" resultMap="BaseResultMap">
    select *
    from composition
    <where>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR}
      </if>
    </where>
  </select>
  <select id="selectFollow" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity" resultMap="BaseResultMap">
    select *
    from composition
    where visibility > 1 and username = #{username,jdbcType=VARCHAR} and valid != 2
  </select>
  <select id="selectNew" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity" resultMap="BaseResultMap">
    select *
    from composition
    where visibility = 3 and valid != 2
  </select>
  <select id="selectHot" resultType="cn.edu.zucc.se2020g11.api.model.CompositionCountModel">
    select *
    from composition_count
    where visibility = 3 and valid != 2
  </select>
  <select id="selectCountByCompositionId" resultType="cn.edu.zucc.se2020g11.api.model.CompositionCountModel">
    select *
    from composition_count
    where composition_id = #{compositionId,jdbcType=INTEGER}
  </select>
  <update id="updateByValid" parameterType="cn.edu.zucc.se2020g11.api.entity.CompositionEntity">
    update composition
    <set>
      <if test="valid != null">
        valid = #{valid,jdbcType=BIT},
      </if>
    </set>
    where composition_id = #{compositionId,jdbcType=INTEGER}
  </update>
  <select id="selectByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
    select *
    from composition
    where username = #{username,jdbcType=VARCHAR} and visibility = 3
  </select>
  <select id="selectSum" resultType="java.lang.Integer">
    select count(*)
    from composition
  </select>
  <select id="selectSumByToday" resultType="java.lang.Integer">
    select count(*)
    from composition
    where release_time > DATE_SUB(curdate(),INTERVAL 0 DAY) and release_time <![CDATA[<]]> DATE_SUB(curdate(),INTERVAL -1 DAY)
  </select>
</mapper>