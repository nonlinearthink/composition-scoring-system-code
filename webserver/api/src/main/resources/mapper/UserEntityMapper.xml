<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.zucc.se2020g11.api.dao.UserEntityMapper">
  <resultMap id="BaseResultMap" type="cn.edu.zucc.se2020g11.api.entity.UserEntity">
    <id column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="signature" jdbcType="VARCHAR" property="signature" />
    <result column="avatar_url" jdbcType="VARCHAR" property="avatarUrl" />
    <result column="is_male" jdbcType="BIT" property="isMale" />
    <result column="vip_days" jdbcType="INTEGER" property="vipDays" />
    <result column="frozen" jdbcType="BIT" property="frozen" />
    <result column="defrosting_time" jdbcType="TIMESTAMP" property="defrostingTime" />
  </resultMap>
  <sql id="Base_Column_List">
    username, password, nickname, email, phone, signature, avatar_url, is_male, vip_days, 
    frozen, defrosting_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user
    where username = #{username,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="cn.edu.zucc.se2020g11.api.entity.UserEntity">
    insert into user (username, password, nickname,
                      email, phone, signature,
                      avatar_url, is_male, vip_days,
                      frozen, defrosting_time)
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR},
            #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{signature,jdbcType=VARCHAR},
            #{avatarUrl,jdbcType=VARCHAR}, #{isMale,jdbcType=BIT}, #{vipDays,jdbcType=INTEGER},
            #{frozen,jdbcType=BIT}, #{defrostingTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.zucc.se2020g11.api.entity.UserEntity">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="signature != null">
        signature,
      </if>
      <if test="avatarUrl != null">
        avatar_url,
      </if>
      <if test="isMale != null">
        is_male,
      </if>
      <if test="vipDays != null">
        vip_days,
      </if>
      <if test="frozen != null">
        frozen,
      </if>
      <if test="defrostingTime != null">
        defrosting_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="signature != null">
        #{signature,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="isMale != null">
        #{isMale,jdbcType=BIT},
      </if>
      <if test="vipDays != null">
        #{vipDays,jdbcType=INTEGER},
      </if>
      <if test="frozen != null">
        #{frozen,jdbcType=BIT},
      </if>
      <if test="defrostingTime != null">
        #{defrostingTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.zucc.se2020g11.api.entity.UserEntity">
    update user
    <set>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="signature != null">
        signature = #{signature,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="isMale != null">
        is_male = #{isMale,jdbcType=BIT},
      </if>
      <if test="defrostingTime != null">
        #{defrostingTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where username = #{username,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.zucc.se2020g11.api.entity.UserEntity">
    update user
    set password = #{password,jdbcType=VARCHAR},
        nickname = #{nickname,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        phone = #{phone,jdbcType=VARCHAR},
        signature = #{signature,jdbcType=VARCHAR},
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
        is_male = #{isMale,jdbcType=BIT},
        vip_days = #{vipDays,jdbcType=INTEGER},
        frozen = #{frozen,jdbcType=BIT},
        defrosting_time = #{defrostingTime,jdbcType=TIMESTAMP}
    where username = #{username,jdbcType=VARCHAR}
  </update>
  <update id="updateUser" parameterType="cn.edu.zucc.se2020g11.api.entity.UserEntity">
    update user
    <set>
      <if test="vipDays != null">
        vip_days = #{vipDays,jdbcType=INTEGER},
      </if>
      <if test="frozen != null">
        frozen = #{frozen,jdbcType=BIT},
      </if>
      <if test="defrostingTime != null">
        defrosting_time = #{defrostingTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where username = #{username,jdbcType=VARCHAR}
  </update>
  <select id="selectByEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where email = #{email,jdbcType=VARCHAR}
  </select>
  <select id="selectByUsernameAndEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username,jdbcType=VARCHAR} and email = #{email,jdbcType=VARCHAR}
  </select>
  <select id="selectSum" resultType="java.lang.Integer">
    select count(*)
    from user
  </select>
  <select id="selectUserByNickname" parameterType="java.lang.String" resultType="java.lang.String">
    select nickname
    from user
    where nickname like #{nickname,jdbcType=VARCHAR}
  </select>
  <select id="selectUserView" resultType="cn.edu.zucc.se2020g11.api.model.UsernameCardModel">
    select *
    from user_view
    where nickname like #{nickname,jdbcType=VARCHAR}
  </select>
  <select id="selectSumByToday" resultType="java.lang.Integer">
    select count(*)
    from user
    where defrosting_time > DATE_SUB(curdate(),INTERVAL 0 DAY) and defrosting_time <![CDATA[<]]> DATE_SUB(curdate(),INTERVAL -1 DAY)
  </select>
</mapper>